<mxfile host="65bd71144e">
    <diagram id="oduZ3OfM_AwTNwdZHd9h" name="Page-1">
        <mxGraphModel dx="1002" dy="-529" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="5" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/04/Enacapsulation-528x198.png;" parent="1" vertex="1">
                    <mxGeometry x="210" y="1410" width="340" height="127.5" as="geometry"/>
                </mxCell>
                <mxCell id="6" value="&lt;h1&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;what is object&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span style=&quot;background-color: initial; font-size: 12px; font-weight: normal;&quot;&gt;Recall employee systems&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span style=&quot;background-color: initial; font-size: 12px; font-weight: normal;&quot;&gt;Encapsulation concept&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/h1&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; font-size: 12px; font-weight: normal;&quot;&gt;- It means to encapsulate (make a acapule of ) all the date members &amp;amp; methods within a single capsule&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial; font-size: 12px; font-weight: normal;&quot;&gt;- Struct and class, allows that&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;labelBackgroundColor=none;fontSize=12;fontColor=#FFFFFF;" parent="1" vertex="1">
                    <mxGeometry x="70" y="1150" width="440" height="230" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=https://slideplayer.com/slide/9875501/32/images/2/The+pyramid+of+OO+Abstract%2F+Philosophical+Practical+PBA+WEB+%E2%80%93+BEWP.jpg;" parent="1" vertex="1">
                    <mxGeometry x="105" y="1590" width="420" height="315" as="geometry"/>
                </mxCell>
                <mxCell id="8" value="&lt;h1&gt;Programming Paradigms&lt;/h1&gt;&lt;p style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 19px;&quot;&gt;Definiton&lt;/font&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;: A progarmming paradigm is a style, or way o fprogramming&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;&quot;&gt;https://cs.lmu.edu/~ray/notes/paradigms/&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;font color=&quot;#ffffff&quot; style=&quot;&quot; face=&quot;Crimson Pro, serif&quot;&gt;&lt;span style=&quot;font-size: 19px; background-color: rgb(0, 0, 0);&quot;&gt;https://www.freecodecamp.org/news/an-introduction-to-programming-paradigms/&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;span style=&quot;background-color: rgb(0, 0, 0);&quot;&gt;&lt;br&gt;https://www.sas.upenn.edu/~jesusfv/Lecture_HPC_7_Programming_Paradigms.pdf&lt;br&gt;&lt;br&gt;https://www.geeksforgeeks.org/introduction-of-programming-paradigms/&lt;br&gt;&lt;br&gt;https://www.datacamp.com/blog/introduction-to-programming-paradigms&lt;br&gt;&lt;br&gt;https://www.cs.ucf.edu/~leavens/ComS541Fall97/hw-pages/paradigms/major.html#functional&lt;br&gt;&lt;br&gt;&lt;/span&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
                    <mxGeometry x="80" y="1940" width="650" height="280" as="geometry"/>
                </mxCell>
                <mxCell id="9" value="&lt;h1 style=&quot;font-size: 24px;&quot;&gt;&lt;font style=&quot;font-size: 24px;&quot;&gt;Design patterns&lt;/font&gt;&lt;/h1&gt;&lt;p style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;https://www.oodesign.com/&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;https://refactoring.guru/smells/long-method&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;https://www.geeksforgeeks.org/design-patterns-in-object-oriented-programming-oop/&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;labelBackgroundColor=#000000;fontSize=19;fontColor=#FFFFFF;" parent="1" vertex="1">
                    <mxGeometry x="120" y="2270" width="600" height="180" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="OOP Programming Paradihgm : Why&lt;br&gt;&lt;br&gt;it is a paradigm so it can be implemeted in C also" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;fontSize=12;fontColor=#FFFFFF;" parent="1" vertex="1">
                    <mxGeometry x="50" y="2510" width="280" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="&lt;h1&gt;OO Principles&lt;/h1&gt;&lt;p&gt;The most important skills we need in design!&lt;br&gt;● SOLID Principles&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Single Responsibility Principle (SRP)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Open/Closed Principle (OCP)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Liskov Substitution Principle (LSP)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Interface Segregation Principle (ISP)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Dependency Inversion Principle (DIP)&lt;br&gt;● DRY (Don’t Repeat Yourself)&lt;br&gt;● KISS (Keep it simple, Stupid!)&lt;br&gt;● YAGNI (You ain't gonna need it)&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;labelBackgroundColor=none;fontSize=12;fontColor=#FFFFFF;" parent="1" vertex="1">
                    <mxGeometry x="60" y="2640" width="400" height="200" as="geometry"/>
                </mxCell>
                <mxCell id="13" value="&lt;h1&gt;Data Hiding vs Encapsulation&lt;/h1&gt;&lt;p&gt;Data Hiding is not possible without Encapsulation&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="20" y="2970" width="380" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="14" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=https://www.cpp.thiyagaraaj.com/cms/assets/cimages/encapsulation.png;" vertex="1" parent="1">
                    <mxGeometry x="70" y="3059.54" width="419.4" height="212.92" as="geometry"/>
                </mxCell>
                <mxCell id="15" value="&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Data hiding (mechansim access modifers: public &amp;amp; private)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Encapsulation can be achieve by the struct&lt;/span&gt;&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="50" y="2875" width="340" height="40" as="geometry"/>
                </mxCell>
                <mxCell id="19" value="&lt;h1 style=&quot;font-size: 25px;&quot;&gt;&lt;font style=&quot;font-size: 25px;&quot;&gt;Abstraction in c++&lt;/font&gt;&lt;/h1&gt;&lt;p style=&quot;font-size: 14px;&quot;&gt;● Public/private access modifiers to reveal/hide details (data &amp;amp; functions)&lt;br&gt;● :: scope resolution operator to separate implementation from interface&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Access member functions defined outside the class&lt;br&gt;● Header files to seperate the written code&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○&amp;nbsp;Enhance Reusability + Implementation Replacements (e.g. faster version / different OS)&lt;br&gt;● Levels of abstraction&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○&amp;nbsp;The higher the level, the less detail. The lower the level, the more detail.&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Whole system is the highest abstraction (E.g. Google Search Engine)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Designed by inheritance (later)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Utilized by polymorphism (later)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#9;&lt;/span&gt;○ Composition also plays a factor in structuring the code.&lt;br&gt;● As you see, abstraction is involved in all OOP detail&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1">
                    <mxGeometry x="30" y="3330" width="600" height="270" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>